<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Ten Thousand Dollar Screw]]></title>
  <link href="http://seandmccarthy.github.com/atom.xml" rel="self"/>
  <link href="http://seandmccarthy.github.com/"/>
  <updated>2014-09-24T21:46:07+10:00</updated>
  <id>http://seandmccarthy.github.com/</id>
  <author>
    <name><![CDATA[Sean D McCarthy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java and Ruby and XML]]></title>
    <link href="http://seandmccarthy.github.com/blog/2012/09/27/java-and-ruby-and-xml/"/>
    <updated>2012-09-27T08:07:00+10:00</updated>
    <id>http://seandmccarthy.github.com/blog/2012/09/27/java-and-ruby-and-xml</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working with a colleague on a project to create a set of command line applications to read and emit various genomics file formats. The clients asked that we write the applications in Java, since we&#8217;ll be handing it over to them and it&#8217;s the language they&#8217;re most comfortable with.</p>

<p>One of the file formats is <a href="http://www.psidev.info/mzidentml">mzidentML</a>, an XML format.</p>

<p>It&#8217;s been a while since I&#8217;ve used Java in anger, and using it to read XML probably longer, so it was virtually like learning it anew.</p>

<p>Even with my more Java adept colleague, it took hours to work out how to use the Java XML API for this relatively simple task. So by noting the analogous operations using Ruby and <a href="http://nokogiri.org/">Nokogiri</a>, I&#8217;ll save myself the grief in future.</p>

<p>It&#8217;s also interesting to note where I think things in the Java XML API are more verbose or complicated, but probably some of the myriad of external Java XML processing packages address these.</p>

<h2>Namespaces</h2>

<p>If your XML uses namespaces, like mzidentML does:</p>

<pre><code>&lt;mzIdentML id="" version="1.0.0"
     xsi:schemaLocation="http://psidev.info/psi/pi/mzIdentML/1.0 http://mascotx/mascot/xmlns/schema/mzIdentML/mzIdentML1.0.0.xsd"
     xmlns="http://psidev.info/psi/pi/mzIdentML/1.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     creationDate="2012-09-14T11:21:00"&gt;
</code></pre>

<p>then you need to specify the namespace in your XPath expressions.</p>

<p>Here is the minimum required (as best as I could determine) to set an XML namespace:</p>

<pre><code>xPath.setNamespaceContext(new NamespaceContext() {
    public String getNamespaceURI(String prefix) {
        if (prefix == null)
            throw new NullPointerException("Null prefix");
        else if ("mz".equals(prefix))
            return "http://psidev.info/psi/pi/mzIdentML/1.0";
        return XMLConstants.NULL_NS_URI;
    }
    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }
    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }
});
</code></pre>

<p>So that it can be used in an XPath expression as so:</p>

<pre><code>NodeList peptideList = (NodeList)xPath.evaluate("//mz:Peptide", rootNode, XPathConstants.NODESET);
</code></pre>

<p>In Ruby, using Nokogiri, it can basically be:</p>

<pre><code>MZIDENTML_NS = 'http://psidev.info/psi/pi/mzIdentML/1.0';
# Look for &lt;Peptide&gt; elements in this namespace
peptide_list = doc.xpath("//mz:Peptide", {'mz' =&gt;  MZIDENTML_NS})
</code></pre>

<p>Now I can appreciate somewhat that the Java NamespaceContext interface is trying to cover more than this simple use case. However I feel there should be, in the core Java API, a simple alternative specifically for this common use case.</p>

<h2>XPath Expressions</h2>

<p>There was a hint of these in the section above.</p>

<p>To evaluate an XPath expression in Java:</p>

<pre><code>NodeList peptideList = (NodeList)xPath.evaluate("//mz:Peptide", rootNode, XPathConstants.NODESET);
</code></pre>

<p>The casting and the constant are understandable in a statically typed language, although I did wonder if method overloading could be used to avoid the casting (obviously the last parameter could not be a String constant, perhaps NodeList.class for example).</p>

<p>The Ruby/Nokogiri version of searching for elements with XPath:</p>

<pre><code>peptide_list = doc.xpath("//mz:Peptide", {'mz' =&gt;  MZIDENTML_NS})
</code></pre>

<h2>Retrieving Attributes</h2>

<p>Given the following XML:</p>

<pre><code>&lt;PeptideEvidence id="PE_11_1_KPYK1_YEAST_0_469_474" start="469" end="474" pre="K" post="E" missedCleavages="0" isDecoy="false" DBSequence_Ref="DBSeq_1_KPYK1_YEAST" /&gt;
</code></pre>

<p>It took a while to work out a way to get an XML attribute value with the Java XML API. I was convinced this must not be right, but it seems that it is:</p>

<pre><code>String id = node.getAttributes().getNamedItem("id").getNodeValue();
</code></pre>

<p>Contrast that with Ruby/Nokogiri:</p>

<pre><code>id = node['id']
</code></pre>

<p>Completely straightforward and intuitive.</p>

<h2>Conclusion</h2>

<p>I&#8217;m sure we could have cast around and evaluated the available XML parsing/handling libraries for Java. Many probably make life a lot simpler.</p>

<p>Ultimately we didn&#8217;t because we thought the task was simple and straightforward, and hence didn&#8217;t need another potentially large library. We thought the provided Java XML API should be sufficient. It was, but it wasn&#8217;t straightforward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cause of a Filename too long error in Passenger]]></title>
    <link href="http://seandmccarthy.github.com/blog/2012/06/11/the-cause-of-a-filename-too-long-error-in-passenger/"/>
    <updated>2012-06-11T21:16:00+10:00</updated>
    <id>http://seandmccarthy.github.com/blog/2012/06/11/the-cause-of-a-filename-too-long-error-in-passenger</id>
    <content type="html"><![CDATA[<p>Due to a space issue on a server, I moved the location I had deployed a Rails app to another mount point. This is all easy, just move the files, check permissions, and make a few path changes in the Apache configuration file for that virtualhost.</p>

<p>But when I did a reload on Apache, the app didn&#8217;t come back up.</p>

<p>I headed straight for the appropriate Apache error log to see if there was anything enlightening. What looked interesting was:</p>

<pre><code>[ pid=14748 thr=3086636752 file=ext/apache2/HelperAgent.cpp:353 time=2012-06-04 15:38:41.247 ]: Cannot create Unix socket '/spare/[path redacted for this blog]/shared/system/passenger.1.0.17475/generation-11/spawn-server/socket.14748.139057232': filename is too long.
</code></pre>

<p>What made no sense to me was that the quoted path could be too long for Linux.</p>

<p>I tried my luck searching the web and the best I got was <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=674">an issue raised on 24th May 2011</a>, which was unresolved<sup><a href="#footnote">1</a></sup>.</p>

<p>Guess I was going to have to do this the hard way.</p>

<p>The upside was that the error message had a stack trace that pointed to a root cause.</p>

<pre><code> in 'void Passenger::SpawnManager::restartServer()' (SpawnManager.h:170)
 in 'Passenger::SpawnManager::SpawnManager(const std::string&amp;, const boost::shared_ptr&lt;Passenger::ServerInstanceDir::Generation&gt;&amp;, const Passenger::AccountsDatabasePtr&amp;, const std::string&amp;, const Passenger::AnalyticsLoggerPtr&amp;, int, const std::string&amp;)' (SpawnManager.h:535)
 in 'Passenger::ApplicationPool::Pool::Pool(const std::string&amp;, const boost::shared_ptr&lt;Passenger::ServerInstanceDir::Generation&gt;&amp;, const Passenger::AccountsDatabasePtr&amp;, const std::string&amp;, const Passenger::AnalyticsLoggerPtr&amp;, int, const std::string&amp;)' (Pool.h:1078)
 in 'Server::Server(Passenger::FileDescriptor, pid_t, const std::string&amp;, bool, const std::string&amp;, const std::string&amp;, const std::string&amp;, const std::string&amp;, unsigned int, unsigned int, unsigned int, unsigned int, const Passenger::VariantMap&amp;)' (HelperAgent.cpp:239)
 in 'int main(int, char**)' (HelperAgent.cpp:343)
</code></pre>

<p>I downloaded the Phusion Passenger source and starting looking. Line 170 of SpawnManager.h was a trace breakpoint, but directly below it was:</p>

<pre><code>socketFilename = generation-&gt;getPath() + "/spawn-server/socket." +
    toString(getpid()) + "." +
    pointerToIntString(this);
socketPassword = Base64::encode(random.generateByteString(32));
serverSocket = createUnixServer(socketFilename.c_str());
</code></pre>

<p>So I could see the construction of the full path for the socket file, and that was being passed to createUnixServer(). Wielding <a href="http://betterthangrep.com/">ack</a>, I located createUnixServer in passenger/ext/common/Utils/IOUtils.cpp and found this interesting check:</p>

<pre><code>if (filename.size() &gt; sizeof(addr.sun_path) - 1) {
    string message = "Cannot create Unix socket '";
    message.append(filename.toString());
    message.append("': filename is too long.");
    throw RuntimeException(message);
}
</code></pre>

<p>Hmmm, the effective path length of the socket filename is limited by <code>sizeof(addr.sun_path)</code>. The <code>addr</code> variable is of type <code>struct sockaddr_un</code>. With some more web searching <a href="http://www.ccplusplus.com/2011/10/struct-sockaddrun.html">I found the definition for this type</a>:</p>

<pre><code>struct sockaddr_un {
    unsigned short sun_family;  /* AF_UNIX */
    char sun_path[108];
}
</code></pre>

<p>So the limit of the socket filename in Passenger (full path) is 107 chars (108 - 1). When I moved my webapp I changed the PassengerTempDir path value in the Apache configuration accordingly. The new path (plus the socketFilename auto-generated path) exceeded 107 chars. Augh.</p>

<p>This effectively means that, with the minimum auto-generated socket filename path being <em>around</em> 70 chars, you&#8217;re left with <em>about</em> 37 chars to play with for the PassengerTempDir path.</p>

<p>I adjusted my paths accordingly, and I could fire up the Rails app successfully.</p>

<p>As to why the sockaddr_un struct has that limit? I haven&#8217;t been able to find out yet.</p>

<hr />

<p><a id="footnote"></a>
1. I&#8217;ve now added my findings as a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goals]]></title>
    <link href="http://seandmccarthy.github.com/blog/2012/06/10/goals/"/>
    <updated>2012-06-10T20:36:00+10:00</updated>
    <id>http://seandmccarthy.github.com/blog/2012/06/10/goals</id>
    <content type="html"><![CDATA[<ol>
<li><a href="#discovery">Make this about discovery</a></li>
<li><a href="#bookmark">Bookmark and describe other&#8217;s insights</a></li>
<li><a href="#positive">Keep it positive</a></li>
</ol>


<p><a id="discovery"></a></p>

<h2>1. Discovery</h2>

<p>In an <a href="http://www-cs-faculty.stanford.edu/~knuth/email.html">article</a> Donald Knuth stated:</p>

<blockquote><p>&#8220;Email is a wonderful thing for people whose role in life is to be on top of things. But not for me; my role is to be on the bottom of things.&#8221;</p></blockquote>

<p>I love it when I have an opportunity to get the bottom of things. To learn how something works under the hood. To chase down a bug or unexpected behaviour and resolve it.</p>

<p>What I&#8217;ve not done in the past is the document what I did. The process in and of itself was satisfying enough personally. I never thought it would either be interesting to others, or would serve me in the future. Maybe this will remain true, but I&#8217;ve resolved to start documenting the discovery process and resolution and see what comes of it.</p>

<p><a id="bookmark"></a></p>

<h2>2. Bookmark and describe other&#8217;s insights</h2>

<p>Thanks to various sources, I read a number of blog posts, watch conference videos, and lurk around/post to discussions. I tend to bookmark a few, but I&#8217;m still hopeless at keeping the various bookmarks across 3 or more devices centralised/syncronised. Bookmarking also doesn&#8217;t let me describe what I liked or gained from it. There&#8217;s no TL;DR summary.</p>

<p>So I&#8217;m going to use this blog to help me remember what I liked and why.</p>

<p><a id="positive"></a></p>

<h2>3. Keep it positive</h2>

<p>No rants, naysaying, or picking on easy targets. If I disagree with something I&#8217;ll present the (IMHO) better alternative.</p>

<p>There&#8217;s so much good stuff out there, so I want to highlight that.</p>
]]></content>
  </entry>
  
</feed>
